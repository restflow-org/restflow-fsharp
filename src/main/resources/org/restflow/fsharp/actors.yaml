imports:

- classpath:/org/restflow/fsharp/fsharpActor.yaml

components:

- id: Adder
  type: FSharpActor
  properties:
    step: |
      let sum = a + b
    inputs:
      a: 
        default: 0
      b: 
        default: 0
    outputs: 
      sum:
    types:
      a: Integer
      b: Integer
      sum: Integer
      
- id: ConstantSource
  type: FSharpActor
  properties:
    step: |
      let output = value
    inputs: 
      value:
    outputs: 
      value:

- id: IntegerConstantSource
  type: FSharpActor
  properties:
    step: |
      let output = value
    inputs: 
      value:
    outputs: 
      value:
    types:
      value: Integer
      output: Integer

- id: Counter
  type: FSharpActor
  properties:
    initialize:
      let count = 0
    step: |
      count <- count + 1
    inputs: 
      input:
    outputs:
      count:
    state:
      count:
    types:
      count: Integer 

- id: IntegerBandpassFilter
  type: FSharpActor
  properties:
    step: |
      let mutable output = 0
      if (input >= min && input <= max) then
        output <- input
        None
      else
        disableOutput("output")
        None
    inputs: 
      min:
      max:
      input:
    outputs: 
      output:
    types:
      input: Integer
      min: Integer
      max: Integer
      output: Integer
              
- id: IntegerSequenceGenerator
  type: FSharpActor
  properties:
    initialize: |
      let nextValue = initial
    step: |
      let value = nextValue
      nextValue <- nextValue + step
      if (value > max) then disableOutput("value")
    state:
      nextValue:
    inputs:
      initial: 
        default: 1
      step:
        default: 1
      max: 
        default: 1
    outputs:
      value:
    types:
      initial: Integer
      step: Integer
      max: Integer
      value: Integer
      nextValue: Integer

- id: IntegerStreamMergerNoDuplicates
  type: FSharpActor
  properties:
    initialize: |
      let _last = 0
      let _first = true
      enableInput "a" 
      enableInput "b"
    step: |
      let mutable c = -1
      match a, b with
      | None, None -> disableOutput "c"
      | None, Some(b) ->  c <- b; enableInput "b" 
      | Some(a), None ->  c <- a; enableInput "a"
      | Some(a), Some(b) ->
          if (a < b) then
              c <- a
              enableInput "a" 
          elif (a > b) then
              c <- b
              enableInput "b"
          elif (a = b) then
              c <- a
              enableInput "a"
              enableInput "b"

      if (_first) then
        _last <- c
        _first <- false
      else
        if (c = _last) then
            disableOutput "c"
        else
            _last <- c
      
    inputs: 
      a:
        optional: true
        nullable: true
        defaultReadiness: false
      b:
        optional: true
        nullable: true
        defaultReadiness: false
    outputs: 
      c:
    state: 
      a:
      b:
      _last:
      _first:
    types:
      a: Integer
      b: Integer
      c: Integer
      _last: Integer
      _first: Boolean

- id: Multiplier
  type: FSharpActor
  properties:
    step: let product = a * b
    inputs: 
      a:
      b:
    outputs: 
      product:
    types:
      a: Number
      b: Number
      product: Number

- id: PrintStreamWriter
  type: FSharpActor
  properties:
    initialize: |
      let buffer = ""
    step: |
      if (buffer.Equals("")) then buffer <- message else  buffer <- buffer + "_NEWLINE_" + message      
      if (outputImmediately) then  printfn "%s" message
    wrapup: |
      open System
      if (outputAtWrapup) then
        printfn "*** %s ***" name
        buffer <- buffer.Replace("_NEWLINE_", Environment.NewLine)
        printfn "%s" buffer
    inputs:
      name:
      message:
      outputImmediately: 
        default: true
      outputAtWrapup: 
        default: false
    state:
      name:
      buffer:
      outputAtWrapup:
    types:
      buffer: String
      name: String
      message: String
      outputImmediately: Boolean
      outputAtWrapup: Boolean

- id: SingleUnitBuffer
  type: ConstantSource

- id: SingleUnitIntegerBuffer
  type: IntegerConstantSource

- id: StringConcatenator
  type: FSharpActor
  properties:
    step: |
      let concatenatedString = stringOne + stringTwo
    inputs:
      stringOne:
      stringTwo:
    outputs: 
      concatenatedString:
    types:
      stringOne: String
      stringTwo: String